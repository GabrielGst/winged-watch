@startuml test
!theme mars
title Optimal Sailing Course Web Application
scale 5
' top to bottom direction

' General padding and alignment settings
skinparam padding 10
skinparam componentPadding 10
skinparam componentSpacing 50
skinparam defaultTextAlignment center

' Adjust link appearance
skinparam linetype polyline
skinparam ArrowFontSize 11
' skinparam ArrowColor Black
skinparam ArrowThickness 1
' skinparam fixCircleLabelOverlapping true 

' Define components and their roles
actor User as U

' Main application boundary
package "Optimal Sailing Course Web Application" {

    package "Backend Services" {
        component "API Gateway" as APIG
        component "Request Processor" as RP
        component "Course Computation Engine" as CCE
    }

    package "External Data Fetchers" {
        component "Wind Data Fetcher" as WDF
        component "Ocean Current Data Fetcher" as OCF
        component "Tidal Data Fetcher" as TDF
    }

    package "Frontend" {
        component "Web UI" as UI
    }
}

package "External Databases" {
    database "Wind Database" as WIND_DB
    database "Current Database" as CUR_DB
    database "Tidal Database" as TIDE_DB
}

' Connections within the application
U -> UI : Enters Boat Parameters
UI --> APIG : Sends Parameters for Optimal Course
APIG -> RP : Forwards User Parameters
RP -> CCE : Initiates Course Computation with Parameters

' Data fetching from external databases
CCE --> WDF : Requests Wind Data
CCE --> OCF : Requests Ocean Current Data
CCE --> TDF : Requests Tidal Data
WDF --> WIND_DB : Fetches Wind Information
OCF --> CUR_DB : Fetches Ocean Current Information
TDF --> TIDE_DB : Fetches Tidal Information

' Data flow back to computation engine
WIND_DB --> WDF : Returns Wind Data
CUR_DB --> OCF : Returns Ocean Current Data
TIDE_DB --> TDF : Returns Tidal Data
WDF --> CCE : Provides Wind Data : down
OCF --> CCE : Provides Ocean Current Data
TDF --> CCE : Provides Tidal Data

' Optimal Course Computation
CCE -> RP : Returns Optimal Course
RP -> APIG : Sends Computed Course
APIG -> UI : Delivers Optimal Course for Display

' Legend
note top of CCE : Python backend that communicate with the front end \n via a Flask server (upgrades should use django) 
note top of UI : Electron web app rendered in a web browser and communicate \n with the backend python server through HTTP. 

@enduml
